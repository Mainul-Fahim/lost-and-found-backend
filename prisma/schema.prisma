// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String       @id @default(uuid())
  name      String
  email     String       @unique
  password  String
  role      UserRole     @default(USER)
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  profile   UserProfile?
  updatedAt DateTime     @updatedAt
  foundItem FoundItem[]
  claim     Claim[]
  LostItem  LostItem[]

  @@map("users")
}

model UserProfile {
  id        String   @id @default(uuid())
  userId    String   @unique
  bio       String
  age       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("userModel")
}

model LostItemCategory {
  id        String     @id @default(uuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  LostItem  LostItem[]

  @@map("lostItemCategories")
}

model LostItem {
  id           String      @id @default(uuid())
  userId       String
  categoryId   String     
  LostItemName String
  description  String
  location     String
  status       FoundStatus @default(NOT_FOUND)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  user     User             @relation(fields: [userId], references: [id])
  category LostItemCategory @relation(fields: [categoryId], references: [id])

  @@map("lostItems")
}

model FoundItemCategory {
  id        String      @id @default(uuid())
  name      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  foundItem FoundItem[]

  @@map("foundItemCategories")
}

model FoundItem {
  id            String   @id @default(uuid())
  userId        String
  categoryId    String  
  foundItemName String
  description   String
  location      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user     User              @relation(fields: [userId], references: [id])
  category FoundItemCategory @relation(fields: [categoryId], references: [id])
  claim    Claim[]

  @@map("foundItems")
}

model Claim {
  id                     String      @id @default(uuid())
  userId                 String
  foundItemId            String      @unique
  status                 ClaimStatus @default(PENDING)
  distinguishingFeatures String
  lostDate               DateTime    @default(now())
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt

  user      User      @relation(fields: [userId], references: [id])
  foundItem FoundItem @relation(fields: [foundItemId], references: [id])

  @@map("claims")
}

enum ClaimStatus {
  APPROVED
  REJECTED
  PENDING
}

enum FoundStatus {
  FOUND
  NOT_FOUND
}

enum UserRole {
  ADMIN
  USER
  SUPER_ADMIN
}
